#
# Copyright (c) 2017 Cloudera, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

#
# Sample Cloudera Director configuration file based on the Cloudera Azure reference architecture:
# http://www.cloudera.com/documentation/other/reference-architecture/PDF/cloudera_ref_arch_azure.pdf
#
# Simple non-HA cluster with a single master node, 3 worker nodes
#


#
# Cluster name
#

name: Azure-ETL-Cluster
environmentName: Azure-nonHA
deploymentName: Cloudera-Manager-on-Azure

# The owner is used to tag the instances, as well as setup hdfs storage
OWNER: "REPLACE_ME_OWNER"

#
# Cloud provider configuration (credentials, region or zone and optional default image)
#

provider {
    type: azure

    #
    # ID of Azure region to use. NOTE: region must support Premium Storage
    # See: https://azure.microsoft.com/en-us/regions/#services
    #

    region: "REPLACE_ME_REGION"

    #
    # Azure Resource Management URL.
    #

    mgmtUrl: "https://management.core.windows.net/"

    #
    # Azure Active Directory Subscription ID.
    #

    subscriptionId: "REPLACE_ME_SUBSCRIPTION_ID"

    #
    # Azure Active Directory URL.
    #

    aadUrl: "https://login.windows.net/"

    #
    # Tenant ID (from AAD)
    #

    tenantId: "REPLACE_ME_TENANT_ID"

    #
    # Azure Active Directory Application Client ID.
    #

    clientId: "REPLACE_ME_CLIENT_ID"

    #
    # Client Secret
   #

    clientSecret: "REPLACE_ME_CLIENT_SECRET"
}



#
# SSH credentials to use to connect to the machines
#

ssh {
    username: "centos"
    privateKey: REPLACE_ME_SSH_PRIVATE_KEY
}


common-instanceTemplate {

    # Core config fields that are common to all node types
    base {
    	availabilitySet: "asedge"
        type: STANDARD_DS12_V2
        image: cloudera-centos-6-latest
        networkSecurityGroupResourceGroup: "ClouderaDirectorRG"
        networkSecurityGroup: "cloudera-director-vnet-nsg"
        virtualNetworkResourceGroup: "ClouderaDirectorRG"
        virtualNetwork: "cloudera-director-vnet"
        subnetName: "cloudera-director-subnet"
        hostFqdnSuffix: "toby.west"
        tags {
            owner: ${?USER}
	    build: azure.simple.conf
        }
    }

    # Core config fields that are common to all master nodes
    master {
    	availabilitySet: "asmaster"
        computeResourceGroup: "ClouderaDirectorRG"
        instanceNamePrefix: "master"
        storageAccountType: "PremiumLRS"
        dataDiskCount: 4
        dataDiskSize: 1023
        publicIP: No
    }

    # Config fields for worker nodes
    worker {
    	availabilitySet: "asworker"
        computeResourceGroup: "ClouderaDirectorRG"
        instanceNamePrefix: "worker"
        storageAccountType: "PremiumLRS"
        dataDiskCount: 8
        dataDiskSize: 1023
        publicIP: No
    }

    # Config fields for edge nodes
    edge {
    	availabilitySet: "asedge"
        computeResourceGroup: "ClouderaDirectorRG"
        instanceNamePrefix: "edge"
        storageAccountType: "PremiumLRS"
        dataDiskCount: 1
        dataDiskSize: 1023
        # Change this to Yes to allow accessing edge/CM nodes via public IP
        publicIP: No
    }
}

bootstrap-script {
    os-generic : """#!/bin/sh

#
# Copyright (c) 2017 Cloudera, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

#
# This script will bootstrap these OSes:
#   - CentOS 6.7
#   - CentOS 7.2
#   - RHEL 6.7
#   - RHEL 7.2
#
# Notes and notible differences between OSes:
#   - CentOS 6.7 and RHEL 6.7 use dhclient
#   - CentOS 7.2 and RHEL 7.2 use NetworkManager
#


#
# Functions
#

# writing dhclient-exit-hooks is the same for CentOS 6.x and RHEL 6.x
# function not indented so EOF works
dhclient_6()
{
# dhclient-exit-hooks explained in dhclient-script man page: http://linux.die.net/man/8/dhclient-script
# cat a here-doc represenation of the hooks to the appropriate file
cat > /etc/dhcp/dhclient-exit-hooks <<"EOF"
#!/bin/bash
printf "\ndhclient-exit-hooks running...\n\treason:%s\n\tinterface:%s\n" "${reason:?}" "${interface:?}"
# only execute on the primary nic
if [ "$interface" != "eth0" ]
then
    exit 0;
fi
# when we have a new IP, perform nsupdate
if [ "$reason" = BOUND ] || [ "$reason" = RENEW ] ||
[ "$reason" = REBIND ] || [ "$reason" = REBOOT ]
then
    printf "\tnew_ip_address:%s\n" "${new_ip_address:?}"
    host=$(hostname -s)
    domain=$(hostname | cut -d'.' -f2- -s)
    domain=${domain:='cdh-cluster.internal'} # REPLACE-ME If no hostname is provided, use cdh-cluster.internal
    IFS='.' read -ra ipparts <<< "$new_ip_address"
    ptrrec="$(printf %s "$new_ip_address." | tac -s.)in-addr.arpa"
    nsupdatecmds=$(mktemp -t nsupdate.XXXXXXXXXX)
    resolvconfupdate=$(mktemp -t resolvconfupdate.XXXXXXXXXX)
    echo updating resolv.conf
    grep -iv "search" /etc/resolv.conf > "$resolvconfupdate"
    echo "search $domain" >> "$resolvconfupdate"
    cat "$resolvconfupdate" > /etc/resolv.conf
    echo "Attempting to register $host.$domain and $ptrrec"
    {
        echo "update delete $host.$domain a"
        echo "update add $host.$domain 600 a $new_ip_address"
        echo "send"
        echo "update delete $ptrrec ptr"
        echo "update add $ptrrec 600 ptr $host.$domain"
        echo "send"
    } > "$nsupdatecmds"
    nsupdate "$nsupdatecmds"
fi
#done
exit 0;
EOF
chmod 755 /etc/dhcp/dhclient-exit-hooks
service network restart
}


centos_6x()
{
    echo "CentOS 6.x"

    # execute the CentOS 6.x / RHEL 6.x dhclient-exit-hooks setup
    dhclient_6
}


rhel_6x()
{
    echo "RHEL 6.x"

    # rewrite SELINUX config to disabled and turn off enforcement
    sed -i.bak "s/^SELINUX=.*$/SELINUX=disabled/" /etc/selinux/config
    setenforce 0
    # stop firewall and disable
    service iptables stop
    chkconfig iptables off
    # update config to disable IPv6 and disable
    echo "# Disable IPv6" >> /etc/sysctl.conf
    echo "net.ipv6.conf.all.disable_ipv6 = 1" >> /etc/sysctl.conf
    echo "net.ipv6.conf.default.disable_ipv6 = 1" >> /etc/sysctl.conf
    sysctl -w net.ipv6.conf.all.disable_ipv6=1
    sysctl -w net.ipv6.conf.default.disable_ipv6=1

    # execute the CentOS 6.x / RHEL 6.x dhclient-exit-hooks setup
    dhclient_6
}


# writing network manager hooks is the same for CentOS 7.2 and RHEL 7.2
# function not indented so EOF works
networkmanager_7()
{
# Centos 7.2 and RHEL 7.2 uses NetworkManager. Add a script to be automatically invoked when interface comes up.
cat > /etc/NetworkManager/dispatcher.d/12-register-dns <<"EOF"
#!/bin/bash
# NetworkManager Dispatch script
# Deployed by Cloudera Director Bootstrap
#
# Expected arguments:
#    $1 - interface
#    $2 - action
#
# See for info: http://linux.die.net/man/8/networkmanager

# Register A and PTR records when interface comes up
# only execute on the primary nic
if [ "$1" != "eth0" || "$2" != "up" ]
then
    exit 0;
fi

# when we have a new IP, perform nsupdate
new_ip_address="$DHCP4_IP_ADDRESS"

host=$(hostname -s)
domain=$(hostname | cut -d'.' -f2- -s)
domain=${domain:='cdh-cluster.internal'} # REPLACE-ME If no hostname is provided, use cdh-cluster.internal
IFS='.' read -ra ipparts <<< "$new_ip_address"
ptrrec="$(printf %s "$new_ip_address." | tac -s.)in-addr.arpa"
nsupdatecmds=$(mktemp -t nsupdate.XXXXXXXXXX)
resolvconfupdate=$(mktemp -t resolvconfupdate.XXXXXXXXXX)
echo updating resolv.conf
grep -iv "search" /etc/resolv.conf > "$resolvconfupdate"
echo "search $domain" >> "$resolvconfupdate"
cat "$resolvconfupdate" > /etc/resolv.conf
echo "Attempting to register $host.$domain and $ptrrec"
{
    echo "update delete $host.$domain a"
    echo "update add $host.$domain 600 a $new_ip_address"
    echo "send"
    echo "update delete $ptrrec ptr"
    echo "update add $ptrrec 600 ptr $host.$domain"
    echo "send"
} > "$nsupdatecmds"
nsupdate "$nsupdatecmds"
exit 0;
EOF
chmod 755 /etc/NetworkManager/dispatcher.d/12-register-dns
service network restart
}


centos_7x()
{
    echo "CentOS 7.x"

    # execute the CentOS 7.x / RHEL 7.x network manager setup
    networkmanager_7
}


rhel_7x()
{
    echo "RHEL 7.x"

    # rewrite SELINUX config to disable and turn off enforcement
    sed -i.bak "s/^SELINUX=.*$/SELINUX=disabled/" /etc/selinux/config
    setenforce 0
    # stop firewall and disable
    systemctl stop iptables
    systemctl iptables off
    # RHEL 7.x uses firewalld
    systemctl stop firewalld
    systemctl disable firewalld
    # Disable tuned so it does not overwrite sysctl.conf
    service tuned stop
    systemctl disable tuned
    # Disable chrony so it does not conflict with ntpd installed by Director
    systemctl stop chronyd
    systemctl disable chronyd
    # update config to disable IPv6 and disable
    echo "# Disable IPv6" >> /etc/sysctl.conf
    echo "net.ipv6.conf.all.disable_ipv6 = 1" >> /etc/sysctl.conf
    echo "net.ipv6.conf.default.disable_ipv6 = 1" >> /etc/sysctl.conf
    # swappniess is set by Director in /etc/sysctl.conf
    # Poke sysctl to have it pickup the config change.
    sysctl -p

    # execute the CentOS 7.x / RHEL 7.x network manager setup
    networkmanager_7
}


#
# Main workflow
#

# ensure user is root
if [ "$(id -u)" -ne 0 ]; then
    echo "Please run as root."
    exit 1
fi

# find the OS and release
os=""
release=""

# if it's there, use lsb_release
rpm -q redhat-lsb
if [ $? -eq 0 ]; then
    os=$(lsb_release -si)
    major_release=$(lsb_release -sr | cut -d '.' -f 1)

# if lsb_release isn't installed, use /etc/redhat-release
else
    grep  "CentOS.* 6\." /etc/redhat-release
    if [ $? -eq 0 ]; then
        os="CentOS"
        major_release="6"
    fi

    grep "CentOS.* 7\." /etc/redhat-release
    if [ $? -eq 0 ]; then
        os="CentOS"
        major_release="7"
    fi

    grep "Red Hat Enterprise Linux Server release 6\." /etc/redhat-release
    if [ $? -eq 0 ]; then
        os="RedHatEnterpriseServer"
        major_release="6"
    fi

    grep "Red Hat Enterprise Linux Server release 7\." /etc/redhat-release
    if [ $? -eq 0 ]; then
        os="RedHatEnterpriseServer"
        major_release="7"
    fi
fi

echo "OS: $os $major_release"

# select the OS and run the appropriate setup script
not_supported_msg="OS $os $release is not supported."
if [ "$os" = "CentOS" ]; then
    if [ "$major_release" = "6" ]; then
        centos_6x
    elif [ "$major_release" = "7" ]; then
        centos_7x
    else
        echo "$not_supported_msg"
        exit 1
    fi

elif [ "$os" = "RedHatEnterpriseServer" ]; then
    if [ "$major_release" = "6" ]; then
        rhel_6x
    elif [ "$major_release" = "7" ]; then
        rhel_7x
    else
        echo "$not_supported_msg"
        exit 1
    fi
else
    echo "$not_supported_msg"
    exit 1
fi
"""
} # end bootstrap-script


# Instant Templates

instances {

    master {
        image: ${?common-instanceTemplate.base.image}
        type: ${?common-instanceTemplate.base.type}
        computeResourceGroup: ${?common-instanceTemplate.master.computeResourceGroup}
        networkSecurityGroupResourceGroup: ${?common-instanceTemplate.base.networkSecurityGroupResourceGroup}
        networkSecurityGroup: ${?common-instanceTemplate.base.networkSecurityGroup}
        virtualNetworkResourceGroup: ${?common-instanceTemplate.base.virtualNetworkResourceGroup}
        virtualNetwork: ${?common-instanceTemplate.base.virtualNetwork}
        subnetName: ${?common-instanceTemplate.base.subnetName}
        instanceNamePrefix: cm-1
        hostFqdnSuffix: ${?common-instanceTemplate.base.hostFqdnSuffix}
        availabilitySet: ${?common-instanceTemplate.master.availabilitySet}
        publicIP: ${?common-instanceTemplate.master.publicIP}
        storageAccountType: ${?common-instanceTemplate.master.storageAccountType}
        dataDiskCount: ${?common-instanceTemplate.master.dataDiskCount}
        dataDiskSize: ${?common-instanceTemplate.master.dataDiskSize}
        tags: ${?common-instanceTemplate.base.tags}
        bootstrapScript: ${?bootstrap-script.os-generic}
    }

    worker {
        image: ${?common-instanceTemplate.base.image}
        type: ${?common-instanceTemplate.base.type}
        computeResourceGroup: ${?common-instanceTemplate.worker.computeResourceGroup}
        networkSecurityGroupResourceGroup: ${?common-instanceTemplate.base.networkSecurityGroupResourceGroup}
        networkSecurityGroup: ${?common-instanceTemplate.base.networkSecurityGroup}
        virtualNetworkResourceGroup: ${?common-instanceTemplate.base.virtualNetworkResourceGroup}
        virtualNetwork: ${?common-instanceTemplate.base.virtualNetwork}
        subnetName: ${?common-instanceTemplate.base.subnetName}
        instanceNamePrefix: ${?common-instanceTemplate.worker.instanceNamePrefix}
        hostFqdnSuffix: ${?common-instanceTemplate.base.hostFqdnSuffix}
        availabilitySet: ${?common-instanceTemplate.worker.availabilitySet}
        publicIP: ${?common-instanceTemplate.worker.publicIP}
        storageAccountType: ${?common-instanceTemplate.worker.storageAccountType}
        dataDiskCount: ${?common-instanceTemplate.worker.dataDiskCount}
        dataDiskSize: ${?common-instanceTemplate.worker.dataDiskSize}
        tags: ${?common-instanceTemplate.base.tags}
        bootstrapScript: ${?bootstrap-script.os-generic}
    }

    edge {
        image: ${?common-instanceTemplate.base.image}
        type: ${?common-instanceTemplate.base.type}
        computeResourceGroup: ${?common-instanceTemplate.edge.computeResourceGroup}
        networkSecurityGroupResourceGroup: ${?common-instanceTemplate.base.networkSecurityGroupResourceGroup}
        networkSecurityGroup: ${?common-instanceTemplate.base.networkSecurityGroup}
        virtualNetworkResourceGroup: ${?common-instanceTemplate.base.virtualNetworkResourceGroup}
        virtualNetwork: ${?common-instanceTemplate.base.virtualNetwork}
        subnetName: ${?common-instanceTemplate.base.subnetName}
        instanceNamePrefix: ${?common-instanceTemplate.edge.instanceNamePrefix}
        hostFqdnSuffix: ${?common-instanceTemplate.base.hostFqdnSuffix}
        availabilitySet: ${?common-instanceTemplate.edge.availabilitySet}
        publicIP: ${?common-instanceTemplate.edge.publicIP}
        storageAccountType: ${?common-instanceTemplate.edge.storageAccountType}
        dataDiskCount: ${?common-instanceTemplate.edge.dataDiskCount}
        dataDiskSize: ${?common-instanceTemplate.edge.dataDiskSize}
        tags: ${?common-instanceTemplate.base.tags}
        bootstrapScript: ${?bootstrap-script.os-generic}
    }

} # End instance templates


#
# Configuration for Cloudera Manager. Cloudera Director can use an existing Cloudera Manager
# or bootstrap everything from scratch for a new cluster
#

cloudera-manager {

    instance: ${instances.edge} {
        tags {
            application: "Cloudera Manager 5"
        }
	publicIP: No
	instanceNamePrefix: cm1
    }

   configs {
        # CLOUDERA_MANAGER corresponds to the Cloudera Manager Server configuration options

   	 CLOUDERA_MANAGER {
	    enable_api_debug: false
            custom_banner_html: "Managed by Cloudera Director"
            MANAGES_PARCELS: true
	    enable_faster_bootstrap: true
    	}
    }

    #
    # Automatically activate 60-Day Cloudera Enterprise Trial
    #
    enableEnterpriseTrial: true

    repository: "http://archive.cloudera.com/cm5/redhat/7/x86_64/cm/5.10/"
    repositoryKeyUrl: "http://archive.cloudera.com/cm5/redhat/7/x86_64/cm/RPM-GPG-KEY-cloudera"

}



#
# Cluster description
#

cluster {

    products {
      CDH: 5.10 # includes Hive and Spark
    }
    configs {
      HDFS {
        core_site_safety_valve: """
       <property>
	 <name>dfs.adls.oauth2.access.token.provider.type</name>
	 <value>ClientCredential</value>
       </property>
       <property>
	 <name>dfs.adls.oauth2.refresh.url</name>
       <value>https://login.microsoftonline.com/6b91f9fd-cf51-4eb5-bc73-5bd9043d0b62/oauth2/token</value>
       </property>
       <property>
	 <name>dfs.adls.oauth2.client.id</name>
	 <value>REPLACE_ME_ADLS_CLIENT_ID</value>
       </property>
       <property>
	 <name>dfs.adls.oauth2.credential</name>
	 <value>REPLACE_ME_ADLS_CREDENTIAL</value>
       </property>
        """
      }
    }


    parcelRepositories: ["http://archive.cloudera.com/cdh5/parcels/5.10/"]


    services: [HDFS, YARN, HIVE, SPARK_ON_YARN, OOZIE]

    masters {
      count: 1
      instance: ${instances.master}

      roles {
        HDFS: [NAMENODE, SECONDARYNAMENODE]
        YARN: [RESOURCEMANAGER, JOBHISTORY]
        HIVE: [HIVESERVER2, HIVEMETASTORE]
        OOZIE: [OOZIE_SERVER]
        SPARK_ON_YARN: [SPARK_YARN_HISTORY_SERVER]
      }
    }

    workers {
      count: 2

      instance: ${instances.worker}

      roles {
        HDFS: [DATANODE]
        YARN: [NODEMANAGER]
      }
    }

}
